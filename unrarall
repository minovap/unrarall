#!/usr/bin/env bash

#unrarall
# Copyright (C) 2011, 2012, 2013 Brendan Le Foll <brendan@fridu.net>
# Copyright (C) 2011, 2012, 2013 Dan Liew <dan@su-root.co.uk>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
##########################################################################

# Set some defaults
declare -x FIND="find" #set to gfind to use homebrew's GNU findutils on OSX Yosemite
declare -x SED="sed"
declare -x DIR=""
declare -x RM="rm"
declare -rx UNRARALL_VERSION="0.5.0"
declare -ix FORCE=0
declare -ix VERBOSE=0
declare -ix QUIET=0
declare -ix CKSFV=1
declare -ix ALLOW_FAILURES=0
declare -x UNRAR_METHOD="e"
declare -x CKSFV_FLAGS="-q -g"
declare -x UNRARALL_BIN="" #Leave empty to let unrarall to loop through UNRAR_BINARIES, setting this will disable searching through UNRAR_BINARIES
declare -x UNRAR_BINARIES=(unrar rar 7z) #Array of binaries to try and use, the order here is the order of precedence
declare -x UNRARALL_PID="$$"
declare -x UNRARALL_EXECUTABLE_NAME=$(basename $0;)
declare -x UNRARALL_PASSWORD_FILE="${HOME}/.unrar_passwords" #If this exists and unrar asks for a password
declare -ax UNRARALL_DETECTED_CLEAN_UP_HOOKS
declare -ax UNRARALL_CLEAN_UP_HOOKS_TO_RUN=(none)
declare -x UNRARALL_OUTPUT_DIR=""
declare -ix DEPTH=4
declare -ix SKIP_IF_EXISTS=0
declare -ix MV_BACKUP=0 # 0 -> we can use mv -b, 1 -> resort to shenanigans to not clobber when moving
`mv --help | grep  "\-\-backup" 2>&1 >/dev/null`
MV_BACKUP=$?

function usage()
{
  echo "Usage: ${UNRARALL_EXECUTABLE_NAME} [ --clean=<hook>[,<hook>] ] [ --force ] [ --full-path ]
                [ --verbose | --quiet ] [--7zip | --backend=<backend> ] [--dry] [--disable-cksfv] [ --password-file <file> ]
                [ --output DIRECTORY ] [ --find-binary <binary_path> ] [ --depth <amt> ] [--skip-if-exists] <DIRECTORY>
       ${UNRARALL_EXECUTABLE_NAME} --help
       ${UNRARALL_EXECUTABLE_NAME} --version

Usage (short options):
     ${UNRARALL_EXECUTABLE_NAME}  [-f] [ -v | -q ] [-7] [-d] [-o DIRECTORY ] [-s] <DIRECTORY>
     ${UNRARALL_EXECUTABLE_NAME} -h

DESCRIPTON
${UNRARALL_EXECUTABLE_NAME} is a utility to unrar and clean up various files
(.e.g. rar files). Sub-directories are automatically recursed and if a rar file
exists in a sub-directory then the rar file is extracted into that subdirectory.

Use --clean= if you want to cleanup (delete files/folders). Otherwise no
cleaning is done. It can also be used to delete rar files that have already been
used for extraction with \"--clean=rar --force\". Use with caution!

OPTIONS

-7, --7zip           Force using 7zip instead of trying to automatically find a
                     program to extract the rar files.
-d, --dry            Dry run of unrar and cleaning. No action will actually be
                     performed.
--allow-failures     If there were any successful extractions, ignore errors and
                     exit with code 0.
-s, --disable-cksfv  Use cksfv (if present) to check the CRC of the downloaded
                     files (if present) before extracting
--clean=             Clean if unrar extraction succeeds (use --force to override).
                     The clean up hooks specified determine what files/folders
                     are removed. By default this is 'none'. Hooks are separated
                     by a comma and are executed in order specified.
  fi
}

#function to get flags for unrar binary
function getUnrarFlags()
{
  #$1 is assumed to be unrar binary name
  case "$1" in
    unrar|rar)
      echo -o+ -y
    ;;
    7z)
      echo -y
    ;;
    echo)
      echo
    ;;
    *)
      #This code should only be reached if the programmer has made an error
      message error "Failed to determine flags for unsupported program \"$1\""
      #We will probably be called in a sub shell but we need to kill the parent shell
      kill -TERM ${UNRARALL_PID}
      exit 1;
    ;;
  esac
}

#function to check if an archive has been extracted already
function isAlreadyExtracted()
{
  #test="${UNRARALL_OUTPUT_DIR}/${filename}"
  #message info "isAlreadyExtracted \"$1\" \"$2\" \"$test\" "
  case "$1" in
    unrar)
      file_listing_cmd="unrar lb \"$2\""
    ;;
    7z)
      file_listing_cmd="7z L -ba -slt \"$2\" | grep Path | cut -d '=' -f 2"
    ;;
    rar)
      file_listing_cmd="rar lb \"$2\""
    ;;
    echo)
      return 1
    ;;
    *)
      message info "Unable to determine if \"$2\" was already extracted with \"$1\"."
      message info "Assuming \"$2\" has never been extracted."
      return 1
    ;;
  esac
  for rar_file in $(eval $file_listing_cmd); do
    #message info "Checking if \"$rar_file\" has been extracted."
    check_file="${UNRARALL_OUTPUT_DIR}/${rar_file}"
    if [ ! -e $check_file ]; then
      return 1
    fi
  done
  return 0
}

#fu

  if [ ${EMPTY_FOLDER} -eq 1 ]; then
    UNRARALL_DETECTED_CLEAN_UP_HOOKS[$index]="empty_folders"
  fi
}

#Prints out an escaped version of 1st argument for use in find's regex
#This is posix egrep style regex
function find_regex_escape()
{
  echo "$1" | sed_wrapper 's#\\#\\\\#g ;s/\?/\\?/g ; s/\./\\./g ; s/\+/\\+/g ; s/\*/\\*/g; s/\^/\\^/g ; s/\$/\\$/g; s/\[/\\[/g; s/\]/\\]/g; s/\(/\\(/g; s/\)/\\)/g; s/\|/\\|/g;'
  if [ $? -ne 0 ]; then
    message error "Failed to escape"
    exit 1
  fi
}

#Helper function for hooks to remove a single file/folder
# unrarall-remove-file <FILE> <HOOKNAME>
function unrarall_remove_file_or_folder()
{
      if [ -f "./${1}" -o -d "./${1}" ]; then
        [ "$VERBOSE" -eq 1 ] && message nnl "Hook ${2}: Found ${1} . Attempting to remove..."
        ${RM} -rf $( [ "$VERBOSE" -eq 1 ] && echo '--verbose') "./${1}"
        [ $? -ne 0 ] && message error "Could not remove ${1}" || message ok "Success"
      else
        [ "$VERBOSE" -eq 1 ] && message info "Hook ${2}: No ${1} file/folder found."
      fi
}

#Start of clean-up hooks
# unrarall_clean_* <MODE> <SFILENAME> <RARFILE_DIR>
# <MODE> is either help or clean
# <SFILENAME> is the name of the rar file but with rar suffix removed
# <RARFILE_DIR> is the directory containing the rar files
# Hooks should use ${RM} instead of the 'rm' command
# Hooks cannot be named "all" or "none" as these are reserved.
# Hooks can assume that the current working directory is the directory where files
# extracted. This is not necessarily the same as <RARFILE_DIR> is --output was specified

function unrarall_clean_nfo()
{
  case "$1" in
    help)
      echo "Removes .nfo files with the same name as the .rar file"
    ;;
    clean)
      [ $VERBOSE -eq 1 ] && message info "Deleting ${2}.nfo"
      ${RM} -f "${2}.nfo"
    ;;
    *)
      message error "Could not execute clean-nfo hook"
    ;;
  esac
}

function unrarall_clean_rar()
{
  case "$1" in
    help)
      echo "Removes rar files and sfv fi
      [ "$VERBOSE" -eq 1 ] && message info "Removing all Sample/ folders"
      find_wrapper . -type d -iname 'sample' -exec ${RM} -rf $( [ $VERBOSE -eq 1 ] && echo '-v') '{}' \;
    ;;
    *)
      message error "Could not execute sample_folders hook"
    ;;
  esac
}

function unrarall_clean_sample_videos()
{
  case "$1" in
    help)
      echo "Removes video files with \"sample\" as a prefix and a similar name to the rar file (without extension)"
    ;;
    clean)
      [ "$VERBOSE" -eq 1 ] && message info "Removing video files with \"sample\" prefix"
      find_wrapper . -type f -iregex '^\./sample.*'"$(find_regex_escape "$2")"'\.(asf|avi|mkv|mp4|m4v|mov|mpg|mpeg|ogg|webm|wmv)$' -exec ${RM} -f $( [ $VERBOSE -eq 1 ] && echo '-v') '{}' \;
    ;;
    *)
      message error "Could not execute sample_videos hook"
    ;;
  esac
}

function unrarall_clean_empty_folders()
{
  case "$1" in
    help)
      echo "Removes empty folders in the folder containing the found rar file(s)"
    ;;
    clean)
      [ "$VERBOSE" -eq 1 ] && message info "Removing empty folders"
      if [ ! -d "${3}" ]; then
        message error "RARFILE_DIR (${3}) is not a directory"
        return
      fi
      find_wrapper "${3}" -depth -mindepth 1 -type d -empty -exec rmdir $( [ $VERBOSE -eq 1 ] && echo '-v') '{}' \;
    ;;
    *)
      message error "Could not execute empty_folders hook"
    ;;
  esac
}
#end of clean-up hooks

function safe_move()
{
  if [ "$MV_BACKUP" -eq 0 ]; then
    mv -b "${1}" "${2}"
  else
    mv -n "${1}" "${2}"
    FILE_COUNT=1
    while [ -e "${1}" ]; do
      mv -n "${1}" "${2}.${FILE_COUNT}"
      let FILE_COUNT=FILE_COUNT+1
    done
  fi
}

# Detect the version
      ;;
      --full-path )
        UNRAR_METHOD="x"
      ;;
      -7 | --7zip)
        # to ensure that if --dry and then --7zip are used then we still do a dry run
        if [ "$UNRARALL_BIN" != 'echo' ]; then
          UNRARALL_BIN=7z
        fi
      ;;
      -o | --output)
        shift
        UNRARALL_CMD="${UNRARALL_CMD} ${1}"
        UNRARALL_OUTPUT_DIR="$1"
        if [ ! -d "${UNRARALL_OUTPUT_DIR}" ]; then
          message error "\"${UNRARALL_OUTPUT_DIR}\" is not a directory"
          exit 1
        else
          message info "Using \"${UNRARALL_OUTPUT_DIR}\" as output directory"
        fi

        # Make the directory absolute. This is necessary
        # because we may be changing directory multiple times
        UNRARALL_OUTPUT_DIR="$(cd "${UNRARALL_OUTPUT_DIR}" ; pwd)"
      ;;
      --depth)
        shift
        DEPTH="$1"
        case $DEPTH in
          ''|*[!0-9]*)
            message error "\"${DEPTH}\" is not a number"
            exit 1
           ;;
          *)
            message info "Using \"${DEPTH}\" as as the maximum depth"
          ;;
        esac
      ;;
      --skip-if-exists)
        SKIP_IF_EXISTS=1
      ;;
      --password-file)
        shift
        UNRARALL_CMD="${UNRARALL_CMD} ${1}"
        if [ ! -e "$1" ]; then
          message error "\"$1\" does not exist."
          exit 1
        fi
        if [ ! -f "$1" ] && [ ! -L "$1" ]; then
          message error "\"$1\" is not a file/symlink."
          exit 1
        fi
        password_file_dir="$(cd $(dirname $1) && pwd)"
        password_file_name="$(basename $1)"
        UNRARALL_PASSWORD_FILE="${password_file_dir}/${password_file_name}"
        message info "Using \"${UNRARALL_PASSWORD_FILE}\" as password file"
      ;;
      --backend=*)
        # If using `--dry` don't modify UNRARALL_BIN
        requested_backend="$( echo "$1" | sed_wrapper 's/--backend=//')"
        if [ "$UNRARALL_BIN" != 'echo' ]; then
   

detect_clean_up_hooks

#Verify selected clean-up hooks are ok
if [ ${#UNRARALL_CLEAN_UP_HOOKS_TO_RUN[*]} -eq 1 ] && [ $( echo "${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[0]}" | grep -Ec '^(all|none)$' ) -eq 1 ] ; then
  #Don't need to do anything
  [ $VERBOSE -eq 1 ] && message info "Using virtual clean-up hook ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[0]}"
else
  #Loop through clean up hooks and check it's allowed
  for hook_to_use in ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[*]} ; do
    HOOK_FOUND=0
    for hook in ${UNRARALL_DETECTED_CLEAN_UP_HOOKS[*]}; do
      if [ "$hook_to_use" = "$hook" ]; then
        HOOK_FOUND=1
        break;
      fi
    done

    if [ $HOOK_FOUND -eq 0 ]; then
      message error "Hook $hook_to_use is not a valid clean up hook. See --help"
      exit 1;
    fi

  done
fi

# Current Dir check
if [ "${DIR}" == "." ]; then
  DIR="`pwd`"
fi

#If No user specified binary, cycle through array and try and find a binary that can be used
if [ -z "${UNRARALL_BIN}" ]; then
  for (( index=0; index < ${#UNRAR_BINARIES[@]}; index++)); do
    #Check for binary
    [ $VERBOSE -eq 1 ] && message nnl "Looking for ${UNRAR_BINARIES[$index]}..."
    if type -P ${UNRAR_BINARIES[$index]} 2>&1 > /dev/null ; then
      #Binary found
      UNRARALL_BIN="${UNRAR_BINARIES[$index]}"
      [ $VERBOSE -eq 1 ] && message ok "found"
      break;
    else
      [ $VERBOSE -eq 1 ] && message error "not found"
    fi

    #check if end of list
    if [ $index -eq $(( ${#UNRAR_BINARIES[@]} -1)) ]; then
      message error "Failed to find binary to perform rar extraction. The following binaries were looked for ${UNRAR_BINARIES[*]}"
      exit 1;
    fi
  done
else
  #check the manually specified binary exists
  if ! type -P ${UNRARALL_BIN} 2>&1 > /dev/null ; then
    message error "The manually specified binary ${UNRARALL_BIN} cannot be found"
    exit 1;
  fi
fi

#Inform the user about the binary chosen
[ $VERBOSE -eq 1 ] && message info "Using \"${UNRARALL_BIN}\" to ext
    # Treat this as a failure so we exit with a non zero exit code
    let FAIL_COUNT=FAIL_COUNT+1
    continue
  fi

  let COUNT=COUNT+1

  # move to directory
  dirname=`dirname "$file"`
  cd "$dirname"
  RARFILE_DIR="$(pwd)"

  SUCCESS=0
  if [ "$CKSFV" -eq 1 ]; then
    # check an sfv file is present
    if [ -e "${sfilename}.sfv" ]; then
      message info "Running cksfv using ${sfilename}.sfv"
      eval cksfv ${CKSFV_FLAGS} \"${sfilename}.sfv\"
      # CKSFV will print error message even with -q on error
      SUCCESS=$?
    fi
  fi

  # Compute fullpath to rar file
  filenameAbsolute="$(pwd)/${filename}"
  #message ok "File \"${filenameAbsolute}\" appears to have already been extracted, skipping..."
  # Check if file is extracted
  if [ "$SKIP_IF_EXISTS" -eq 1 ] && [ "$SUCCESS" -eq 0 ] && [ "$FORCE" -eq 0 ]; then
    isAlreadyExtracted ${UNRARALL_BIN} ${filenameAbsolute}
    if [ "$?" -eq 0 ]; then
      message ok "File \"${filenameAbsolute}\" appears to have already been extracted, skipping..."
      continue
    fi
  fi

  # Switch to a temporary directory so the extracted file does not clobber anything
  # some special handling here to support macos: http://unix.stackexchange.com/a/84980/210181
  tmp_dir=`mktemp -d -p . 2>/dev/null || TMPDIR=$(pwd) mktemp -d -t 'unrarall.XXXXXX'`
  if [ $? -ne 0 ] || [ -z ${tmp_dir} ] || [ ! -d "${tmp_dir}" ]; then
    message error "Failed to create a temporary directory to handle extraction"
    exit 1
  fi
  cd "${tmp_dir}"
  if [ $? -ne 0 ]; then
    message error "Failed to switch to tmp directory \"${tmp_dir}\""
    exit 1
  fi
  tmp_dir=`pwd`

  # unrar file if SFV checked out or --force was given
  if [ "$SUCCESS" -eq 0 ] || [ "$FORCE" -eq 1 ]; then
    message nnl "Extracting (${UNRAR_METHOD}) \"$file\"..."
    file_encrypted=$(isRarEncrypted ${UNRARALL_BIN} ${filenameAbsolute})
    if [ "${file_encrypted}" -eq 0 ]; then
      # The file is not encrypted. We're extracting without a password
      # Use eval so that redirection gets evaluated correctly
      eval ${UNRARALL_BIN} ${UNRAR_METHOD} $( getUnrarFlags ${UNRARALL_BIN}) -p- "\"${filenameAbsolute}\"" \
        $([ "$VERBOSE" -eq 0 -a "X${UNRARALL_BIN}" != "Xecho" ] && echo ">/dev/null")
      SUCCESS=$?
    else
      # The file is encrypted. if we have a password file, then use it
      if [ -s "${UNRARAL
  empty_directories=( $(find_wrapper . -mindepth 1 -type d -empty) )

  # If user specified extraction directory change to it now
  if [ -n "${UNRARALL_OUTPUT_DIR}" ]; then
    cd "${UNRARALL_OUTPUT_DIR}"
    if [ $? -ne 0 ]; then
      message error "Failed to switch to output directory \"${UNRARALL_OUTPUT_DIR}\""
      exit 1
    fi
  else
    cd "${RARFILE_DIR}"
    if [ $? -ne 0 ]; then
      message error "Failed to switch to rar directory \"${RARFILE_DIR}\""
      exit 1
    fi
  fi

  # Move extracted files to cwd safely
  for extracted_file in "${files[@]}"; do
    mkdir -p "$(dirname ${extracted_file})"
    if [ $? -ne 0 ]; then
      message error "Unable to create directory structure for \"$(dirname ${extracted_file})\""
      exit 1
    fi
    safe_move "${tmp_dir}/${extracted_file}" "${extracted_file}"
    if [ $? -ne 0 ]; then
      message error "Failed to move \"${extracted_file}\" to \"${RARFILE_DIR}\""
      exit 1
    fi
  done
  for dir in "${empty_directories[@]}"; do
    mkdir -p "${dir}"
    if [ $? -ne 0 ]; then
      message error "Unable to create directory structure for \"${dir}\""
      exit 1
    fi
  done

  # Remove the tmp directory
  if [ -d "${tmp_dir}" ]; then
    find_wrapper "${tmp_dir}" -mindepth 1 -type d -empty -delete
    rmdir "${tmp_dir}"
    if [ $? -ne 0 ]; then
      message error "Failed cleanup temporary directory \"${tmp_dir}\""
      exit 1
    fi
  fi

  #Perform clean up if necessary
  if [ ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[0]} != "none" ]; then
    if  [ "$SUCCESS" -eq 0 ] || [ "$FORCE" -eq 1 ] ; then
      message nnl "Running hooks..."
      if [ ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[0]} = "all" ]; then
        #Run every clean up hook
        for hook in ${UNRARALL_DETECTED_CLEAN_UP_HOOKS[*]} ; do
          message nnl "$hook "
          ( unrarall_clean_$hook clean $sfilename "${RARFILE_DIR}" )
        done
      else
        #Run selected clean up hooks
        for hook in ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[*]} ; do
          message nnl "$hook "
          ( unrarall_clean_$hook clean $sfilename "${RARFILE_DIR}")
        done
      fi
      message ok "Finished running hooks"
    else
      message error "Couldn't do requested clean because ${UNRARALL_BIN} extracted unsuccessfully. Use --force to override this behaviour"
    fi
  fi

  cd "$CURRENT_DIR"
done
IFS=$IFS_TEMP

if [ "$QUIET" -ne 1 ]; then
  if [ "$COUNT" -ne 0 ]; then
    EXIT_PHRASE="found and extracted"
    if [ ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[0]} != "none" ]; then
      EXIT_PHRASE="found, extracted and then cleaned using the following hooks: ${UNRARALL_CLEAN_UP_HOOKS_TO_RUN[*]}"
    fi
    message info "$COUNT rar files $EXIT_PHRASE"
  else
    message error "no rar files extracted"
  fi
fi

if [ "$FAIL_COUNT" -ne 0 ]; then
  if [ "$QUIET" -ne 1 ]; then
    message error "${FAIL_COUNT} failure(s)"
  fi
  if [ "$ALLOW_FAILURES" -eq 0 ]; then
    exit 1
  else
    if [ "$COUNT" -eq 0 ]; then
      exit 1
    else
      message info "${COUNT} success(es)"
    fi
  fi
fi
